
DICOM Viewer (image.py) 操作マニュアル
=====================================

このマニュアルは、予備知識がほとんどない方でも本アプリケーション（GUI）を動かし、CT/MR のシリーズ画像を確認・操作・保存できるように、手順や各操作の意味を丁寧に説明します。

目次
-----
- 準備 (インストール要件と簡単な環境構築)
- 実行方法（コマンド例）
- 画面の説明（各UI要素の役割）
- スライダ操作の効果（何を動かすと画像がどう変わるか）
- 実用例：目的別の設定例
- 保存と出力
- トラブルシューティング
- スクリーンショット（プレースホルダ）

1. 準備 (インストール要件と簡単な環境構築)
---------------------------------------

必要なソフトウェア（最小限）
- Python 3.8 以降がインストールされていること（Windows, macOS, Linux いずれでも可）
- 以下の Python パッケージ（pip でインストール）:
	- pydicom
	- numpy
	- pillow
	(PySimpleGUI はあれば GUI が PySimpleGUI 版で動きますが、環境依存性を避けるため tkinter ベースの軽量 GUI を同梱しています。tkinter は通常 Python に同梱されています。)

簡単インストール手順（Windows の cmd.exe 例）
```bash
python -m pip install --user -r requirements.txt
```
requirements.txt には最低限上記パッケージが列挙されています。もし pip の管理に不慣れなら、以下のいずれかを試してください：
- Python を公式サイトからインストールする（インストーラに "Add Python to PATH" をチェック）
- Anaconda/Miniconda を使う場合は、conda 環境を作成してパッケージをインストールすることも可能です。

注意（環境トラブルを避けるためのアドバイス）
- Windows 環境で PySimpleGUI の非公式パッケージが混在していると GUI が壊れることがあります。その場合は PySimpleGUI をアンインストールして tkinter を使って実行してください。本アプリは tkinter にフォールバックします。
- tkinter が見つからない（Python の最小ビルドなど）の場合は、OS の標準パッケージで tkinter を追加インストールしてください（例: Ubuntu では `sudo apt install python3-tk`）。

2. 実行方法（コマンド例）
--------------------------------
ターミナル（cmd.exe）でスクリプトが置かれたフォルダに移動し、次のように実行します。
```bash
python image.py
```
もしくは、DICOM が格納されたフォルダを引数で与えると自動でそのフォルダを読み込みます：
```bash
python image.py "C:\path\to\dicom_folder"
```

3. 画面の説明（各 UI 要素の役割）
---------------------------------
画面は大きく「左のコントロールパネル」と「右のイメージパネル（2枚表示）」に分かれます。

- 左コントロールパネル
	- Open Folder: DICOM シリーズのあるフォルダを選択して読み込み。
	- Load Default: ソースコード中に設定されたデフォルトの DICOM フォルダを読み込み（実験用に用意したフォルダなど）。
	- Orthogonal View: 右側の2枚のうち片方に表示する直交断面を 'Sagittal'（矢状面）または 'Coronal'（冠状面）に切替。
	- Axial slice (スライダ): Axial（元の断面：Z軸方向のスライス）を選択します。スライダを動かすと左側の Axial 画像（右側の左画像）と右側の直交断面が更新されます。
	- Ortho slice (スライダ): 選択した直交断面（Sagittal/Coronal）でのスライス番号を選択します。これにより右側の右画像が切替わります。
	- Window Width (UIラベル) — （内部的には Window Center / WC に相当するスライダ）: 本アプリの UI ではこのスライダに "Window Width" というラベルが表示されますが、機能としては従来の "Window Center"（WC：画像の明るさの中心）に相当します。値を上げると明るい領域が相対的に強調されます。
	- Window Level (UIラベル) — （内部的には Window Width / WW に相当するスライダ）: UI ではこのスライダに "Window Level" と表示されますが、機能はウィンドウ幅（Window Width, WW）でコントラストを調整します。値を小さくするとコントラストが強くなり、広げると階調が滑らかになります。
	- Save Axial: 現在表示中の Axial 画像（オーバーレイされた直線を含む）を PNG として保存します。

- 右イメージパネル
	- 左側に Axial（原画像系列のスライス）が表示されます。右側に選択中の直交断面（Sagittal または Coronal）が表示されます。
	- Axial 画像上には赤い直線が表示され、右側の直交断面がどの位置の切片かを示します。

4. スライダ操作の効果（何を動かすと画像がどう変わるか）
-------------------------------------------------

- Axial slice スライダ
	- 画像: Axial（通常の横断像。頭から足方向の切片）を上下（スライス番号）で移動します。
	- 用途例: 肺や肝などの断層を順に確認したいとき。一つのスライスで病変の位置を確認し、前後のスライスで連続性を確認します。

- Ortho slice スライダ
	- 画像: 右側の直交断面（Sagittal または Coronal）を切替。Sagittal を選ぶと右側に矢状面（身体を左右に分ける面）が表示され、Ortho スライダを動かすと左右方向の異なる断面を確認できます。Coronal を選ぶと前後方向の断面を確認できます。
	- 用途例: 病変の体軸に沿った位置関係（前後・左右）を確認したいときに使用します。

 - Window Center (WC) — 注意: UI上のラベルは "Window Width" になっています
	- 役割: 画像の明るさの中心（従来の Window Center）を決めます。HU（CT の場合）や輝度値の中央値のような扱いです。
	- 操作効果: 値を増やすと画像全体が明るく（白寄り）なり、減らすと暗く（黒寄り）なります。
	- 例: 肺野のコントラストを下げたい（暗く見せたい）場合はこのスライダを下げます。

 - Window Width (WW) — 注意: UI上のラベルは "Window Level" になっています
	- 役割: コントラスト（階調幅）を決めます。
	- 操作効果: 値を小さくするとコントラストが高くなり（特定の HU 範囲だけが強調される）、大きくすると多くの値域が表示されて滑らかな表示になります。
	- 例: 骨や金属を強調したい場合は WW を広げ、軟部組織を見やすくしたい場合は適切に狭めます。

5. 実用例：目的別の設定例
---------------------------------

- 肺野（空気領域）を強調して見たい
	- View: Axial
	- WC: 低めに設定（例: -600 ～ -400 付近）
	- WW: 中程度（例: 800）

- 軟部組織（肝臓、臓器）を確認したい
	- WC: 臓器の平均 HU 付近（例: 30～70）
	- WW: 比較的狭め（例: 200～400）

- 骨構造をはっきり見たい
	- WC: 高めに（例: 200～500）
	- WW: 広め（例: 1500）

6. 保存と出力
-----------------
- Save Axial ボタンで現在表示中の Axial 画像を PNG として保存できます。保存画像には Axial 上に描画された赤い直線（直交断面位置）も含まれます。

7. トラブルシューティング
---------------------------
- Python 実行時にエラーが出る
	- まず Python バージョンを確認してください: `python --version`
	- 依存関係のインストールに失敗した場合は、`pip install --user -r requirements.txt` を再実行してください。

- GUI が表示されない、または PySimpleGUI でエラーが出る
	- PySimpleGUI の非公式パッケージが混在しているとエラーになります。その場合は PySimpleGUI をアンインストールし、tkinter で実行してください。tkinter は通常 Python に同梱されています。

- DICOM フォルダを読み込めない
	- フォルダに DICOM ファイル（PixelData を持つ .dcm 等）が含まれているか確認してください。

8. スクリーンショット（プレースホルダ）
-----------------------------------
以下は説明のためのスクリーンショットを入れるべき箇所です。実際の画像ファイルはここに添付しないため、実行環境で表示される画面をキャプチャして差し替えてください。

- 図1: アプリ起動直後（左コントロールパネルと右の2枚画像）
	- （スクリーンショットをここに挿入）

- 図2: Axial スライダを動かしたときの表示例（スライスの移動）
	- （スクリーンショットをここに挿入）

- 図3: Ortho を Sagittal にして Ortho スライダを動かした例（右画像が変化、左画像に縦線が表示される）
	- （スクリーンショットをここに挿入）


- 図4: Window Center (UI:'Window Width') / Window Width (UI:'Window Level') を変えた例（コントラスト・明るさの違い）
	- （スクリーンショットをここに挿入）

最後に
------
このマニュアルは本アプリケーションを初めて使う方でも基本操作ができるように作成しました。追加で「マウスでウィンドウ/レベルを直接操作したい」「複数パネルを同時に保存したい」などの要望があれば、手を入れて機能追加します。ご希望を教えてください。


変更履歴 / 注意（開発者向け）
---------------------------------
- 2025-10-22: コードの可読性向上のため、GUI スライダに関連する内部変数名と PySimpleGUI のキー名を整理しました。
	- tkinter 側の変数: 上スライダ -> `ui_window_width_var`, 下スライダ -> `ui_window_level_var`
	- PySimpleGUI 側のキー: `-WC-` -> `-UI_WWIDTH-`, `-WW-` -> `-UI_WLEVEL-`
 なお、UI 上のラベル（上: "Window Width", 下: "Window Level"）はそのまま表示されています。内部変数名は UI 表示に合わせてリファクタしましたが、動作上のマッピング（上スライダが内部的に Window Center、下が Window Width に使われる）については既存の実装を維持しています。UI 表示と実際の Window/Level のマッピングを変更したい場合は、apply_window_level の引数順（center, width）に渡す値の割当てを変更してください。

